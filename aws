Interviewers typically tailor their questions based on a candidate's resume and the job role's requirements. If a job requires Kubernetes, Docker, Terraform, and the candidate has those skills listed, they should be prepared for in-depth questions about those technologies. However, if those skills are not on their resume, it's unlikely that the interviewer will focus on them.

A good approach is to carefully analyze the job description, match it with your experience, and prepare accordingly. If you’re applying for Azure DevOps roles, expect questions on CI/CD pipelines, infrastructure as code (IaC) using Terraform/Bicep, monitoring, security, and automation. If Kubernetes and Docker are part of the job description, then brushing up on those topics is essential.

25/2/205==========
Interviewers typically tailor their questions based on a candidate's resume and the job role's requirements. If a job requires Kubernetes, Docker, Terraform, and the candidate has those skills listed, they should be prepared for in-depth questions about those technologies. However, if those skills are not on their resume, it's unlikely that the interviewer will focus on them.

A good approach is to carefully analyze the job description, match it with your experience, and prepare accordingly. If you’re applying for Azure DevOps roles, expect questions on CI/CD pipelines, infrastructure as code (IaC) using Terraform/Bicep, monitoring, security, and automation. If Kubernetes and Docker are part of the job description, then brushing up on those topics is essential.
-----3/1/2025:
I understand your frustration with attending multiple interviews and not getting selected. From my experience, MNCs tend to have a more structured interview process. They usually focus on your introduction, past experience, and skills, and their questions are aligned with what you’ve actually worked on. This makes it easier to showcase your strengths.

On the other hand, smaller companies or startups often ask a wide range of questions across different topics because they prefer candidates who can handle multiple roles. This can make the interview process more unpredictable.

My suggestion is to target MNCs, where the interviews are generally more aligned with your expertise. This approach might improve your chances of selection.

2
NEW

@Ashok Verma
I understand your frustration with attending multiple interviews and not getting selected. From my experience, MNCs tend to have a more structured interview process. They usually focus on your introduction, past experience, and skills, and their questions are aligned with what you’ve actually worked on. This makes it easier to showcase your strengths.  On the other hand, smaller companies or startups often ask a wide range of questions across different topics because they prefer candidates who can handle multiple roles. This can make the interview process more unpredictable.  My suggestion is to target MNCs, where the interviews are generally more aligned with your expertise. This approach might improve your chances of selection.
==============
Attended for Aws Capgemini 
Asked mainly in the services what we worked on 
For em they concentrated mostly on AWS eks ecs 
Pod, node ingress yaml files,
Try to learn or cover more sevices on AWS like lamda, sqs, s3, iam ecs fargate etc, questions are intermediate level only
---
24/Apr/2025:
-----------
**"How do you store secrets?"**, 

they are looking to understand your approach to securely managing sensitive information (like API keys, database credentials, etc.) in your applications. Here's how you can structure your answer:

---

### **1. General Approach to Storing Secrets**
Start by explaining the importance of securely managing secrets:
- **"Secrets are sensitive pieces of information, such as API keys, database credentials, or certificates, that need to be securely stored and accessed by applications. To ensure security, I avoid hardcoding secrets in application code or configuration files and instead use a centralized secret management solution like HashiCorp Vault."**

---

### **2. Why Use a Secret Management Tool?**
Explain why you use a tool like Vault:
- **"I use a secret management tool like HashiCorp Vault because it provides encryption at rest, dynamic secret generation, access control through policies, and audit logging. This ensures that secrets are securely stored, rotated, and accessed only by authorized applications or users."**

---

 **3. How You Store Secrets in Vault**
Describe the process of storing secrets in Vault:
- **"In Vault, I enable the KV (Key-Value) secrets engine to store static secrets like database credentials. For example, I store secrets at paths like `secret/data/myapp/config` with key-value pairs such as `username` and `password`. These secrets are encrypted and can only be accessed by applications or users with the appropriate policies."**

---

**4. How Applications Access Secrets**
Explain how applications retrieve secrets securely:
- **"In Kubernetes, I use Vault's Agent Injector to inject secrets directly into application pods. This is done by annotating the pod or deployment YAML with the required secret paths and templates. Vault then injects the secrets as environment variables or files into the pod, ensuring the application can securely access them without directly interacting with Vault."**



 **5. Example Workflow**
Provide a brief example:
- **"For example, in a Kubernetes deployment, I annotate the pod with the secret path (`secret/data/myapp/config`) and a template for how the secret should be formatted. Vault injects the secret into the pod as a file, such as a database connection string, which the application reads at runtime. This ensures that secrets are not hardcoded or exposed in the source code."**

---

 **6. Common Practices for Secret Management**
Mention best practices:
- **"I follow best practices for secret management, such as:**
  1. **Using short-lived dynamic secrets** (e.g., database credentials generated by Vault).
  2. **Implementing role-based access control (RBAC)** to ensure only authorized applications or users can access specific secrets.
  3. **Enabling audit logging** to track who accessed which secrets and when.
  4. **Regularly rotating secrets** to minimize the impact of potential leaks."

---

**7. If Asked About Alternatives**
If they ask about alternatives to Vault, mention other tools:
- **"Other tools I’ve used or I am familiar with include AWS Secrets Manager, Azure Key Vault, and Kubernetes Secrets. However, Vault is my preferred choice because of its flexibility, support for dynamic secrets, and integration with multiple platforms."**

---

**Sample Answer**
Here’s how you can combine all the points into a concise answer:

**"To securely store secrets, I use a centralized secret management tool like HashiCorp Vault. Vault encrypts secrets at rest and provides fine-grained access control through policies. For example, I store static secrets like database credentials in the KV secrets engine at paths like `secret/data/myapp/config`. 

In Kubernetes, I use Vault's Agent Injector to inject secrets directly into application pods as files or environment variables. This ensures that secrets are not hardcoded in the application code or configuration files. 

Additionally, I follow best practices like role-based access control, audit logging, and regular secret rotation to enhance security."**

=========
17/Apr/2025:
------------
NAT can be used in a context where application needs to download some dependencies from the internet. 

In the Public subnet in its route table, the entry to the Internet Gateway is there while in the Private Subnet in Route Table it's not maintained

It isn't necessary for NAT gateway to be present for Private Subnet , as the application of NAT gateway is to maintain the connection of the application within private subnet to have access / download dependencies 


